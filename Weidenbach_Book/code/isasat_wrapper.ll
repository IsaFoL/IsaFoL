; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"



declare { i1, { i1, i1 } } @IsaSAT_LLVM_default_opts_impl()
declare { i1, { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } } @IsaSAT_LLVM_IsaSAT_code({ i1, { i1, i1 } } %x1, { i64, { i64, { i64, i32* } }* })
declare void @LLVM_DS_NArray_narray_free1 (i32*)

declare void @print_propagations (i64)
declare void @print_conflicts (i64)
declare void @print_decisions (i64)
declare void @print_reductions (i64)
declare void @print_local_restarts (i64)
declare void @print_uset (i64)
declare void @print_GCs (i64)
declare void @print_phase ()



define i64 @IsaSAT_No_Restart_LLVM_IsaSAT_code_wrapped2({ i64, { i64, { i64, i32* } }* } %x) {

  start:
    %x1 = call { i1, { i1, i1 } } @IsaSAT_LLVM_default_opts_impl ()
    %x2 = call { i1, { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } } @IsaSAT_LLVM_IsaSAT_code ({ i1, { i1, i1 } } %x1, { i64, { i64, { i64, i32* } }* } %x)
    %a1 = extractvalue { i1, { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } } %x2, 0
    %x3 = extractvalue { i1, { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } } %x2, 1
    %a1a = extractvalue { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } %x3, 0
    %a2a = extractvalue { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } %x3, 1
    br i1 %a1, label %then, label %else

  then:
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x4 = phi i64 [ 0, %else ], [ 2, %then ]
    br i1 %a1a, label %thena, label %elsea

  thena:
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %x5 = phi i64 [ 0, %elsea ], [ 1, %thena ]
    %r = add i64 %x4, %x5
    %c_1 = extractvalue { i1, { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } } %x2, 0
    %x6 = extractvalue { i1, { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } } %x2, 1
    %c_11 = extractvalue { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } %x6, 0
    %x7 = extractvalue { i1, { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } } %x6, 1
    %c_12 = extractvalue { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } %x7, 0
    %c_2 = extractvalue { { i64, { i64, i32* } }, { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } } %x7, 1
    %uu = extractvalue { i64, { i64, i32* } } %c_12, 0
    %x8 = extractvalue { i64, { i64, i32* } } %c_12, 1
    %uu1 = extractvalue { i64, i32* } %x8, 0
    %x9 = extractvalue { i64, i32* } %x8, 1
    call void @LLVM_DS_NArray_narray_free1 (i32* %x9)
    %c_13 = extractvalue { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } %c_2, 0
    call void @print_propagations(i64 %c_13)
    %b = extractvalue { i64, { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } } %c_2, 1
    %c_14 = extractvalue { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } %b, 0
    call void @print_conflicts(i64 %c_14)
    %b1 = extractvalue { i64, { i64, { i64, { i64, { i64, { i64, i64 } } } } } } %b, 1
    %c_15 = extractvalue { i64, { i64, { i64, { i64, { i64, i64 } } } } } %b1, 0
    call void @print_decisions(i64 %c_15)
    %b2 = extractvalue { i64, { i64, { i64, { i64, { i64, i64 } } } } } %b1, 1
    %c_16 = extractvalue { i64, { i64, { i64, { i64, i64 } } } } %b2, 0
    call void @print_reductions(i64 %c_16)
    %b3 = extractvalue { i64, { i64, { i64, { i64, i64 } } } } %b2, 1
    %c_17 = extractvalue { i64, { i64, { i64, i64 } } } %b3, 0
    call void @print_local_restarts(i64 %c_17)
    %b4 = extractvalue { i64, { i64, { i64, i64 } } } %b3, 1
    %c_18 = extractvalue { i64, { i64, i64 } } %b4, 0
    call void @print_uset(i64 %c_18)
    %b5 = extractvalue { i64, { i64, i64 } } %b4, 1
    %c_19 = extractvalue { i64, i64 } %b5, 0
    call void @print_GCs(i64 %c_19)
    %c_21 = extractvalue { i64, i64 } %b5, 1
    ret i64 %r
}
